#pragma once
#ifndef _FDTD3D_CPML_MPI_DEVICE_MEAT_HPP
#define _FDTD3D_CPML_MPI_DEVICE_MEAT_HPP
#include "fdtd3d_cpml_mpi_2_kernel_global_z_meat.hpp"
namespace jarvis
{
    inline void mpicuCPML::cuda_update_and_mpi_exchange_edge_vel()
    {
        if (is_pml.is_top)
        {
            void *args_list[] = {&geomodel_p->gridext,
                                 &grid_top,
                                 &sub_pad,
                                 &rho_p->device::ptr(),
                                 &seis_record_p->dt,
                                 &pml_dc.device::ptr(),
                                 &ext_wavefield_p->org_wave,
                                 //
                                 &top.vx_x.ptr(),
                                 &top.vx_y.ptr(),
                                 &top.vx_z.ptr(),
                                 &top.vy_x.ptr(),
                                 &top.vy_y.ptr(),
                                 &top.vy_z.ptr(),
                                 &top.vz_x.ptr(),
                                 &top.vz_y.ptr(),
                                 &top.vz_z.ptr(),
                                 //
                                 &a_x.top.device::ptr(),
                                 &a_y.top.device::ptr(),
                                 &a_z.top.device::ptr(),
                                 &a_x_half.top.device::ptr(),
                                 &a_y_half.top.device::ptr(),
                                 &a_z_half.top.device::ptr(),
                                 &b_x.top.device::ptr(),
                                 &b_y.top.device::ptr(),
                                 &b_z.top.device::ptr(),
                                 &b_x_half.top.device::ptr(),
                                 &b_y_half.top.device::ptr(),
                                 &b_z_half.top.device::ptr(),
                                 //
                                 &top_pml_halo.halo_sxx.left_recv.device::ptr(),
                                 &top_pml_halo.halo_sxy.left_recv.device::ptr(),
                                 &top_pml_halo.halo_sxz.left_recv.device::ptr(),
                                 &top_pml_halo.halo_sxx.right_recv.device::ptr(),
                                 &top_pml_halo.halo_sxy.right_recv.device::ptr(),
                                 &top_pml_halo.halo_sxz.right_recv.device::ptr(),
                                 &top_pml_halo.halo_sxy.front_recv.device::ptr(),
                                 &top_pml_halo.halo_syy.front_recv.device::ptr(),
                                 &top_pml_halo.halo_syz.front_recv.device::ptr(),
                                 &top_pml_halo.halo_sxy.back_recv.device::ptr(),
                                 &top_pml_halo.halo_syy.back_recv.device::ptr(),
                                 &top_pml_halo.halo_syz.back_recv.device::ptr()};
            cudaLaunchKernel((void *)cpml::mpi_update_vel_pml_top, jarvis_cuda_kernel_size(grid_top.n_elem), args_list, 0, jarvis_mpi_cuda_stream_p->cal_stream());
        }
        if (is_pml.is_bottom)
        {
            void *args_list[] = {&geomodel_p->gridext,
                                 &grid_bottom,
                                 &sub_pad,
                                 &rho_p->device::ptr(),
                                 &seis_record_p->dt,
                                 &pml_dc.device::ptr(),
                                 &ext_wavefield_p->org_wave,
                                 //
                                 &bottom.vx_x.ptr(),
                                 &bottom.vx_y.ptr(),
                                 &bottom.vx_z.ptr(),
                                 &bottom.vy_x.ptr(),
                                 &bottom.vy_y.ptr(),
                                 &bottom.vy_z.ptr(),
                                 &bottom.vz_x.ptr(),
                                 &bottom.vz_y.ptr(),
                                 &bottom.vz_z.ptr(),
                                 //
                                 &a_x.bottom.device::ptr(),
                                 &a_y.bottom.device::ptr(),
                                 &a_z.bottom.device::ptr(),
                                 &a_x_half.bottom.device::ptr(),
                                 &a_y_half.bottom.device::ptr(),
                                 &a_z_half.bottom.device::ptr(),
                                 &b_x.bottom.device::ptr(),
                                 &b_y.bottom.device::ptr(),
                                 &b_z.bottom.device::ptr(),
                                 &b_x_half.bottom.device::ptr(),
                                 &b_y_half.bottom.device::ptr(),
                                 &b_z_half.bottom.device::ptr(),
                                 //
                                 &bottom_pml_halo.halo_sxx.left_recv.device::ptr(),
                                 &bottom_pml_halo.halo_sxy.left_recv.device::ptr(),
                                 &bottom_pml_halo.halo_sxz.left_recv.device::ptr(),
                                 &bottom_pml_halo.halo_sxx.right_recv.device::ptr(),
                                 &bottom_pml_halo.halo_sxy.right_recv.device::ptr(),
                                 &bottom_pml_halo.halo_sxz.right_recv.device::ptr(),
                                 &bottom_pml_halo.halo_sxy.front_recv.device::ptr(),
                                 &bottom_pml_halo.halo_syy.front_recv.device::ptr(),
                                 &bottom_pml_halo.halo_syz.front_recv.device::ptr(),
                                 &bottom_pml_halo.halo_sxy.back_recv.device::ptr(),
                                 &bottom_pml_halo.halo_syy.back_recv.device::ptr(),
                                 &bottom_pml_halo.halo_syz.back_recv.device::ptr()};
            cudaLaunchKernel((void *)cpml::mpi_update_vel_pml_bottom, jarvis_cuda_kernel_size(grid_bottom.n_elem), args_list, 0, jarvis_mpi_cuda_stream_p->cal_stream());
        }
        if (is_pml.is_front)
        {
            void *args_list[] = {&geomodel_p->gridext,
                                 &grid_front,
                                 &sub_pad,
                                 &is_pml,
                                 &rho_p->device::ptr(),
                                 &seis_record_p->dt,
                                 &pml_dc.device::ptr(),
                                 &ext_wavefield_p->org_wave,
                                 //
                                 &front.vx_x.ptr(),
                                 &front.vx_y.ptr(),
                                 &front.vy_x.ptr(),
                                 &front.vy_y.ptr(),
                                 &front.vz_x.ptr(),
                                 &front.vz_y.ptr(),
                                 //
                                 &a_x.front.device::ptr(),
                                 &a_y.front.device::ptr(),
                                 &a_x_half.front.device::ptr(),
                                 &a_y_half.front.device::ptr(),
                                 &b_x.front.device::ptr(),
                                 &b_y.front.device::ptr(),
                                 &b_x_half.front.device::ptr(),
                                 &b_y_half.front.device::ptr(),
                                 //
                                 &front_pml_halo.halo_sxz.top_recv.device::ptr(),
                                 &front_pml_halo.halo_syz.top_recv.device::ptr(),
                                 &front_pml_halo.halo_szz.top_recv.device::ptr(),
                                 &front_pml_halo.halo_sxz.bottom_recv.device::ptr(),
                                 &front_pml_halo.halo_syz.bottom_recv.device::ptr(),
                                 &front_pml_halo.halo_szz.bottom_recv.device::ptr(),
                                 &front_pml_halo.halo_sxx.right_recv.device::ptr(),
                                 &front_pml_halo.halo_sxy.right_recv.device::ptr(),
                                 &front_pml_halo.halo_sxz.right_recv.device::ptr(),
                                 &front_pml_halo.halo_sxx.left_recv.device::ptr(),
                                 &front_pml_halo.halo_sxy.left_recv.device::ptr(),
                                 &front_pml_halo.halo_sxz.left_recv.device::ptr()};
            cudaLaunchKernel((void *)cpml::mpi_update_vel_pml_front, jarvis_cuda_kernel_size(grid_front.n_elem), args_list, 0, jarvis_mpi_cuda_stream_p->cal_stream());
        }
        if (is_pml.is_back)
        {
            void *args_list[] = {&geomodel_p->gridext,
                                 &grid_back,
                                 &sub_pad,
                                 &is_pml,
                                 &rho_p->device::ptr(),
                                 &seis_record_p->dt,
                                 &pml_dc.device::ptr(),
                                 &ext_wavefield_p->org_wave,
                                 //
                                 &back.vx_x.ptr(),
                                 &back.vx_y.ptr(),
                                 &back.vy_x.ptr(),
                                 &back.vy_y.ptr(),
                                 &back.vz_x.ptr(),
                                 &back.vz_y.ptr(),
                                 //
                                 &a_x.back.device::ptr(),
                                 &a_y.back.device::ptr(),
                                 &a_x_half.back.device::ptr(),
                                 &a_y_half.back.device::ptr(),
                                 &b_x.back.device::ptr(),
                                 &b_y.back.device::ptr(),
                                 &b_x_half.back.device::ptr(),
                                 &b_y_half.back.device::ptr(),
                                 //
                                 &back_pml_halo.halo_sxz.top_recv.device::ptr(),
                                 &back_pml_halo.halo_syz.top_recv.device::ptr(),
                                 &back_pml_halo.halo_szz.top_recv.device::ptr(),
                                 &back_pml_halo.halo_sxz.bottom_recv.device::ptr(),
                                 &back_pml_halo.halo_syz.bottom_recv.device::ptr(),
                                 &back_pml_halo.halo_szz.bottom_recv.device::ptr(),
                                 &back_pml_halo.halo_sxx.right_recv.device::ptr(),
                                 &back_pml_halo.halo_sxy.right_recv.device::ptr(),
                                 &back_pml_halo.halo_sxz.right_recv.device::ptr(),
                                 &back_pml_halo.halo_sxx.left_recv.device::ptr(),
                                 &back_pml_halo.halo_sxy.left_recv.device::ptr(),
                                 &back_pml_halo.halo_sxz.left_recv.device::ptr()};
            cudaLaunchKernel((void *)cpml::mpi_update_vel_pml_back, jarvis_cuda_kernel_size(grid_back.n_elem), args_list, 0, jarvis_mpi_cuda_stream_p->cal_stream());
        }
        if (is_pml.is_right)
        {
            void *args_list[] = {&geomodel_p->gridext,
                                 &grid_right,
                                 &sub_pad,
                                 &is_pml,
                                 &rho_p->device::ptr(),
                                 &seis_record_p->dt,
                                 &pml_dc.device::ptr(),
                                 &ext_wavefield_p->org_wave,
                                 //
                                 &right.vx_x.ptr(),
                                 &right.vy_x.ptr(),
                                 &right.vz_x.ptr(),
                                 //
                                 &a_x.right.device::ptr(),
                                 &a_x_half.right.device::ptr(),
                                 &b_x.right.device::ptr(),
                                 &b_x_half.right.device::ptr(),
                                 //
                                 &right_pml_halo.halo_sxz.top_recv.device::ptr(),
                                 &right_pml_halo.halo_syz.top_recv.device::ptr(),
                                 &right_pml_halo.halo_szz.top_recv.device::ptr(),
                                 &right_pml_halo.halo_sxz.bottom_recv.device::ptr(),
                                 &right_pml_halo.halo_syz.bottom_recv.device::ptr(),
                                 &right_pml_halo.halo_szz.bottom_recv.device::ptr(),
                                 &right_pml_halo.halo_sxy.front_recv.device::ptr(),
                                 &right_pml_halo.halo_syy.front_recv.device::ptr(),
                                 &right_pml_halo.halo_syz.front_recv.device::ptr(),
                                 &right_pml_halo.halo_sxy.back_recv.device::ptr(),
                                 &right_pml_halo.halo_syy.back_recv.device::ptr(),
                                 &right_pml_halo.halo_syz.back_recv.device::ptr()};
            cudaLaunchKernel((void *)cpml::mpi_update_vel_pml_right, jarvis_cuda_kernel_size(grid_right.n_elem), args_list, 0, jarvis_mpi_cuda_stream_p->cal_stream());
        }
        if (is_pml.is_left)
        {
            void *args_list[] = {&geomodel_p->gridext,
                                 &grid_left,
                                 &sub_pad,
                                 &is_pml,
                                 &rho_p->device::ptr(),
                                 &seis_record_p->dt,
                                 &pml_dc.device::ptr(),
                                 &ext_wavefield_p->org_wave,
                                 //
                                 &left.vx_x.ptr(),
                                 &left.vy_x.ptr(),
                                 &left.vz_x.ptr(),
                                 //
                                 &a_x.left.device::ptr(),
                                 &a_x_half.left.device::ptr(),
                                 &b_x.left.device::ptr(),
                                 &b_x_half.left.device::ptr(),
                                 //
                                 &left_pml_halo.halo_sxz.top_recv.device::ptr(),
                                 &left_pml_halo.halo_syz.top_recv.device::ptr(),
                                 &left_pml_halo.halo_szz.top_recv.device::ptr(),
                                 &left_pml_halo.halo_sxz.bottom_recv.device::ptr(),
                                 &left_pml_halo.halo_syz.bottom_recv.device::ptr(),
                                 &left_pml_halo.halo_szz.bottom_recv.device::ptr(),
                                 &left_pml_halo.halo_sxy.front_recv.device::ptr(),
                                 &left_pml_halo.halo_syy.front_recv.device::ptr(),
                                 &left_pml_halo.halo_syz.front_recv.device::ptr(),
                                 &left_pml_halo.halo_sxy.back_recv.device::ptr(),
                                 &left_pml_halo.halo_syy.back_recv.device::ptr(),
                                 &left_pml_halo.halo_syz.back_recv.device::ptr()};
            cudaLaunchKernel((void *)cpml::mpi_update_vel_pml_left, jarvis_cuda_kernel_size(grid_left.n_elem), args_list, 0, jarvis_mpi_cuda_stream_p->cal_stream());
        }
        if (is_pml.is_top)
        {
            top_pml_halo.batch_extract_halo_vel();
        }
        if (is_pml.is_bottom)
        {
            bottom_pml_halo.batch_extract_halo_vel();
        }
        if (is_pml.is_front)
        {
            front_pml_halo.batch_extract_halo_vel();
        }
        if (is_pml.is_back)
        {
            back_pml_halo.batch_extract_halo_vel();
        }
        if (is_pml.is_right)
        {
            right_pml_halo.batch_extract_halo_vel();
        }
        if (is_pml.is_left)
        {
            left_pml_halo.batch_extract_halo_vel();
        }
        jarvis_mpi_cuda_stream_p->sync_cal_stream();
        jarvis_mpi_cuda_stream_p->mpi_start_batch_id(mpi_multi_halo_vel.operator_id);
    }
    //
    inline void mpicuCPML::cuda_update_and_mpi_exchange_edge_stress()
    {
        if (is_pml.is_top)
        {
            void *args_list[] = {&geomodel_p->gridext,
                                 &grid_top,
                                 &sub_pad,
                                 &lambda_p->device::ptr(),
                                 &mu_p->device::ptr(),
                                 &seis_record_p->dt,
                                 &pml_dc.device::ptr(),
                                 &ext_wavefield_p->org_wave,
                                 &ext_wavefield_p->sau.ptr(),
                                 //
                                 &top.sxx_x.ptr(),
                                 &top.sxx_y.ptr(),
                                 &top.sxx_z.ptr(),
                                 &top.syy_x.ptr(),
                                 &top.syy_y.ptr(),
                                 &top.syy_z.ptr(),
                                 &top.szz_x.ptr(),
                                 &top.szz_y.ptr(),
                                 &top.szz_z.ptr(),
                                 &top.sxy_x.ptr(),
                                 &top.sxy_y.ptr(),
                                 &top.sxz_x.ptr(),
                                 &top.sxz_z.ptr(),
                                 &top.syz_y.ptr(),
                                 &top.syz_z.ptr(),
                                 //
                                 &a_x.top.device::ptr(),
                                 &a_y.top.device::ptr(),
                                 &a_z.top.device::ptr(),
                                 &a_x_half.top.device::ptr(),
                                 &a_y_half.top.device::ptr(),
                                 &a_z_half.top.device::ptr(),
                                 &b_x.top.device::ptr(),
                                 &b_y.top.device::ptr(),
                                 &b_z.top.device::ptr(),
                                 &b_x_half.top.device::ptr(),
                                 &b_y_half.top.device::ptr(),
                                 &b_z_half.top.device::ptr(),
                                 //
                                 &top_pml_halo.halo_vx.left_recv.device::ptr(),
                                 &top_pml_halo.halo_vy.left_recv.device::ptr(),
                                 &top_pml_halo.halo_vz.left_recv.device::ptr(),
                                 &top_pml_halo.halo_vx.right_recv.device::ptr(),
                                 &top_pml_halo.halo_vy.right_recv.device::ptr(),
                                 &top_pml_halo.halo_vz.right_recv.device::ptr(),
                                 &top_pml_halo.halo_vx.front_recv.device::ptr(),
                                 &top_pml_halo.halo_vy.front_recv.device::ptr(),
                                 &top_pml_halo.halo_vz.front_recv.device::ptr(),
                                 &top_pml_halo.halo_vx.back_recv.device::ptr(),
                                 &top_pml_halo.halo_vy.back_recv.device::ptr(),
                                 &top_pml_halo.halo_vz.back_recv.device::ptr()};
            cudaLaunchKernel((void *)cpml::mpi_update_stress_pml_top, jarvis_cuda_kernel_size(grid_top.n_elem), args_list, 0, jarvis_mpi_cuda_stream_p->cal_stream());
        }
        //
        if (is_pml.is_bottom)
        {
            void *args_list[] = {&geomodel_p->gridext,
                                 &grid_bottom,
                                 &sub_pad,
                                 &lambda_p->device::ptr(),
                                 &mu_p->device::ptr(),
                                 &seis_record_p->dt,
                                 &pml_dc.device::ptr(),
                                 &ext_wavefield_p->org_wave,
                                 &ext_wavefield_p->sau.ptr(),
                                 //
                                 &bottom.sxx_x.ptr(),
                                 &bottom.sxx_y.ptr(),
                                 &bottom.sxx_z.ptr(),
                                 &bottom.syy_x.ptr(),
                                 &bottom.syy_y.ptr(),
                                 &bottom.syy_z.ptr(),
                                 &bottom.szz_x.ptr(),
                                 &bottom.szz_y.ptr(),
                                 &bottom.szz_z.ptr(),
                                 &bottom.sxy_x.ptr(),
                                 &bottom.sxy_y.ptr(),
                                 &bottom.sxz_x.ptr(),
                                 &bottom.sxz_z.ptr(),
                                 &bottom.syz_y.ptr(),
                                 &bottom.syz_z.ptr(),
                                 //
                                 &a_x.bottom.device::ptr(),
                                 &a_y.bottom.device::ptr(),
                                 &a_z.bottom.device::ptr(),
                                 &a_x_half.bottom.device::ptr(),
                                 &a_y_half.bottom.device::ptr(),
                                 &a_z_half.bottom.device::ptr(),
                                 &b_x.bottom.device::ptr(),
                                 &b_y.bottom.device::ptr(),
                                 &b_z.bottom.device::ptr(),
                                 &b_x_half.bottom.device::ptr(),
                                 &b_y_half.bottom.device::ptr(),
                                 &b_z_half.bottom.device::ptr(),
                                 //
                                 &bottom_pml_halo.halo_vx.left_recv.device::ptr(),
                                 &bottom_pml_halo.halo_vy.left_recv.device::ptr(),
                                 &bottom_pml_halo.halo_vz.left_recv.device::ptr(),
                                 &bottom_pml_halo.halo_vx.right_recv.device::ptr(),
                                 &bottom_pml_halo.halo_vy.right_recv.device::ptr(),
                                 &bottom_pml_halo.halo_vz.right_recv.device::ptr(),
                                 &bottom_pml_halo.halo_vx.front_recv.device::ptr(),
                                 &bottom_pml_halo.halo_vy.front_recv.device::ptr(),
                                 &bottom_pml_halo.halo_vz.front_recv.device::ptr(),
                                 &bottom_pml_halo.halo_vx.back_recv.device::ptr(),
                                 &bottom_pml_halo.halo_vy.back_recv.device::ptr(),
                                 &bottom_pml_halo.halo_vz.back_recv.device::ptr()};
            cudaLaunchKernel((void *)cpml::mpi_update_stress_pml_bottom, jarvis_cuda_kernel_size(grid_bottom.n_elem), args_list, 0, jarvis_mpi_cuda_stream_p->cal_stream());
        }
        //
        if (is_pml.is_front)
        {
            void *args_list[] = {&geomodel_p->gridext,
                                 &grid_front,
                                 &sub_pad,
                                 &is_pml,
                                 &lambda_p->device::ptr(),
                                 &mu_p->device::ptr(),
                                 &seis_record_p->dt,
                                 &pml_dc.device::ptr(),
                                 &ext_wavefield_p->org_wave,
                                 &ext_wavefield_p->sau.ptr(),
                                 //
                                 &front.sxx_x.ptr(),
                                 &front.sxy_x.ptr(),
                                 &front.sxz_x.ptr(),
                                 &front.syy_y.ptr(),
                                 &front.sxy_y.ptr(),
                                 &front.syz_y.ptr(),
                                 //
                                 &a_x.front.device::ptr(),
                                 &a_y.front.device::ptr(),
                                 &a_x_half.front.device::ptr(),
                                 &a_y_half.front.device::ptr(),
                                 &b_x.front.device::ptr(),
                                 &b_y.front.device::ptr(),
                                 &b_x_half.front.device::ptr(),
                                 &b_y_half.front.device::ptr(),
                                 //
                                 &front_pml_halo.halo_vx.top_recv.device::ptr(),
                                 &front_pml_halo.halo_vy.top_recv.device::ptr(),
                                 &front_pml_halo.halo_vz.top_recv.device::ptr(),
                                 &front_pml_halo.halo_vx.bottom_recv.device::ptr(),
                                 &front_pml_halo.halo_vy.bottom_recv.device::ptr(),
                                 &front_pml_halo.halo_vz.bottom_recv.device::ptr(),
                                 &front_pml_halo.halo_vx.right_recv.device::ptr(),
                                 &front_pml_halo.halo_vy.right_recv.device::ptr(),
                                 &front_pml_halo.halo_vz.right_recv.device::ptr(),
                                 &front_pml_halo.halo_vx.left_recv.device::ptr(),
                                 &front_pml_halo.halo_vy.left_recv.device::ptr(),
                                 &front_pml_halo.halo_vz.left_recv.device::ptr()};
            cudaLaunchKernel((void *)cpml::mpi_update_stress_pml_front, jarvis_cuda_kernel_size(grid_front.n_elem), args_list, 0, jarvis_mpi_cuda_stream_p->cal_stream());
        }
        //
        if (is_pml.is_back)
        {
            void *args_list[] = {&geomodel_p->gridext,
                                 &grid_back,
                                 &sub_pad,
                                 &is_pml,
                                 &lambda_p->device::ptr(),
                                 &mu_p->device::ptr(),
                                 &seis_record_p->dt,
                                 &pml_dc.device::ptr(),
                                 &ext_wavefield_p->org_wave,
                                 &ext_wavefield_p->sau.ptr(),
                                 //
                                 &back.sxx_x.ptr(),
                                 &back.sxy_x.ptr(),
                                 &back.sxz_x.ptr(),
                                 &back.syy_y.ptr(),
                                 &back.sxy_y.ptr(),
                                 &back.syz_y.ptr(),
                                 //
                                 &a_x.back.device::ptr(),
                                 &a_y.back.device::ptr(),
                                 &a_x_half.back.device::ptr(),
                                 &a_y_half.back.device::ptr(),
                                 &b_x.back.device::ptr(),
                                 &b_y.back.device::ptr(),
                                 &b_x_half.back.device::ptr(),
                                 &b_y_half.back.device::ptr(),
                                 //
                                 &back_pml_halo.halo_vx.top_recv.device::ptr(),
                                 &back_pml_halo.halo_vy.top_recv.device::ptr(),
                                 &back_pml_halo.halo_vz.top_recv.device::ptr(),
                                 &back_pml_halo.halo_vx.bottom_recv.device::ptr(),
                                 &back_pml_halo.halo_vy.bottom_recv.device::ptr(),
                                 &back_pml_halo.halo_vz.bottom_recv.device::ptr(),
                                 &back_pml_halo.halo_vx.right_recv.device::ptr(),
                                 &back_pml_halo.halo_vy.right_recv.device::ptr(),
                                 &back_pml_halo.halo_vz.right_recv.device::ptr(),
                                 &back_pml_halo.halo_vx.left_recv.device::ptr(),
                                 &back_pml_halo.halo_vy.left_recv.device::ptr(),
                                 &back_pml_halo.halo_vz.left_recv.device::ptr()};
            cudaLaunchKernel((void *)cpml::mpi_update_stress_pml_back, jarvis_cuda_kernel_size(grid_back.n_elem), args_list, 0, jarvis_mpi_cuda_stream_p->cal_stream());
        }
        if (is_pml.is_right)
        {
            void *args_list[] = {&geomodel_p->gridext,
                                 &grid_right,
                                 &is_pml,
                                 &lambda_p->device::ptr(),
                                 &mu_p->device::ptr(),
                                 &seis_record_p->dt,
                                 &pml_dc.device::ptr(),
                                 &ext_wavefield_p->org_wave,
                                 &ext_wavefield_p->sau.ptr(),
                                 //
                                 &right.sxx_x.ptr(),
                                 &right.sxy_x.ptr(),
                                 &right.sxz_x.ptr(),
                                 //
                                 &a_x.right.device::ptr(),
                                 &a_x_half.right.device::ptr(),
                                 &b_x.right.device::ptr(),
                                 &b_x_half.right.device::ptr(),
                                 //
                                 &right_pml_halo.halo_vx.top_recv.device::ptr(),
                                 &right_pml_halo.halo_vy.top_recv.device::ptr(),
                                 &right_pml_halo.halo_vz.top_recv.device::ptr(),
                                 &right_pml_halo.halo_vx.bottom_recv.device::ptr(),
                                 &right_pml_halo.halo_vy.bottom_recv.device::ptr(),
                                 &right_pml_halo.halo_vz.bottom_recv.device::ptr(),
                                 &right_pml_halo.halo_vx.front_recv.device::ptr(),
                                 &right_pml_halo.halo_vy.front_recv.device::ptr(),
                                 &right_pml_halo.halo_vz.front_recv.device::ptr(),
                                 &right_pml_halo.halo_vx.back_recv.device::ptr(),
                                 &right_pml_halo.halo_vy.back_recv.device::ptr(),
                                 &right_pml_halo.halo_vz.back_recv.device::ptr()};
            cudaLaunchKernel((void *)cpml::mpi_update_stress_pml_right, jarvis_cuda_kernel_size(grid_right.n_elem), args_list, 0, jarvis_mpi_cuda_stream_p->cal_stream());
        }
        //
        if (is_pml.is_left)
        {
            void *args_list[] = {&geomodel_p->gridext,
                                 &grid_left,
                                 &is_pml,
                                 &lambda_p->device::ptr(),
                                 &mu_p->device::ptr(),
                                 &seis_record_p->dt,
                                 &pml_dc.device::ptr(),
                                 &ext_wavefield_p->org_wave,
                                 &ext_wavefield_p->sau.ptr(),
                                 //
                                 &left.sxx_x.ptr(),
                                 &left.sxy_x.ptr(),
                                 &left.sxz_x.ptr(),
                                 //
                                 &a_x.left.device::ptr(),
                                 &a_x_half.left.device::ptr(),
                                 &b_x.left.device::ptr(),
                                 &b_x_half.left.device::ptr(),
                                 //
                                 &left_pml_halo.halo_vx.top_recv.device::ptr(),
                                 &left_pml_halo.halo_vy.top_recv.device::ptr(),
                                 &left_pml_halo.halo_vz.top_recv.device::ptr(),
                                 &left_pml_halo.halo_vx.bottom_recv.device::ptr(),
                                 &left_pml_halo.halo_vy.bottom_recv.device::ptr(),
                                 &left_pml_halo.halo_vz.bottom_recv.device::ptr(),
                                 &left_pml_halo.halo_vx.front_recv.device::ptr(),
                                 &left_pml_halo.halo_vy.front_recv.device::ptr(),
                                 &left_pml_halo.halo_vz.front_recv.device::ptr(),
                                 &left_pml_halo.halo_vx.back_recv.device::ptr(),
                                 &left_pml_halo.halo_vy.back_recv.device::ptr(),
                                 &left_pml_halo.halo_vz.back_recv.device::ptr()};
            cudaLaunchKernel((void *)cpml::mpi_update_stress_pml_left, jarvis_cuda_kernel_size(grid_left.n_elem), args_list, 0, jarvis_mpi_cuda_stream_p->cal_stream());
        }
        if (is_pml.is_top)
        {
            top_pml_halo.batch_extract_halo_stress();
        }
        if (is_pml.is_bottom)
        {
            bottom_pml_halo.batch_extract_halo_stress();
        }
        if (is_pml.is_front)
        {
            front_pml_halo.batch_extract_halo_stress();
        }
        if (is_pml.is_back)
        {
            back_pml_halo.batch_extract_halo_stress();
        }
        if (is_pml.is_right)
        {
            right_pml_halo.batch_extract_halo_stress();
        }
        if (is_pml.is_left)
        {
            left_pml_halo.batch_extract_halo_stress();
        }
        jarvis_mpi_cuda_stream_p->sync_cal_stream();
        jarvis_mpi_cuda_stream_p->mpi_start_batch_id(mpi_multi_halo_stress.operator_id);
    }
}
#endif